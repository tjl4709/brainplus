  Symbol | Meaning                                | Step to implement
---------|----------------------------------------|------------------
   # n   | write ptr addr to cell n (default 0)   | 1
  @# n   | get val at + relative addr n (def 0)   | 1
  @## n  | get val at - rel addr n (default 0)    | 1
   @ n   | get value at addr n (default current)  | 1
  @S n   | perform S on ptr                       | 1
   + n   | inc val by n (default 1)               | 1
   - n   | dec val by n (default 1)               | 1
   * n   | mult val by n (default 1)              | 1
   / n   | div val by n (default 1)               | 1
   = n   | set val to n (default 0)               | 1
    .    | print val as ASCII character           | 2
    ,    | set val to read ASCII character        | 2
    {    | open new scope (follows keyword)       | 1
    }    | close current scope (follows })        | 1
 v1 < v2 | returns whether v1 is less than v2     | 1
 v1 > v2 | returns whether v1 is greather than v2 | 1
v1 == v2 | returns whether v1 is equal to v2      | 1
v1 <= v2 | returns v1 less or equal to v2         | 1
v1 >= v2 | returns v1 greater or equal to v2      | 1
v1 != v2 | returns whether v1 is not equal to v2  | 1
*where S is any symbol that acts on val
*where n is any non-negative number (0+) less than MAX_INT
*where v1,v2 are any valid number which may be preceded by @
 *if v1 is unspecified, current val is used
 *if v1 is @, compares ptr with v2

Keyword | Syntax                             | Step to implement
--------|------------------------------------|------------------
#include| #include file                      | 1
#define | #define name sub                   | 1
   if   | if(cond){}                         | 2
  else  | if(cond){}else{}                   | 2
  for   | for(start;cond;step){}             | 2
 while  | while(cond){} -or- do{}while(cond) | 2
   do   | do{}while(cond)                    | 2
   ?:   | cond?val1:val2                     | 2
*where file is another .bp file which will also get parsed excluding top-level statements
*where name is a string literal to be replaced with sub in code body
*where 'cond' is a boolean condition which evaluates to false if zero, true otherwise

Comments: "// ..." for single line, "/* ... */" for multi-line
Integer Conversions:
*replace char literals ('H') with their ASCII value
*allow "0x" prefix to denote hexadecimal

Also to add:
*bitwise operators
*boolean operators
*functions

high-level pseudocode:
0. open include files
1. use text-replacement for defines
  1.1. gather all defines from all files (ensure no duplicates and no recursion)
  1.2. replace defines with defines
  1.3. replace defines in open files
2. use lexer to turn string of characters into string of tokens
3. use AST to parse tokens into useful structures (methods then statements)
4. codegen in the following order (method headers, method bodies, statements)
5. what's next?
