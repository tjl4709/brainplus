 Symbol  | Meaning                                | Step to implement
---------|----------------------------------------|------------------
   @ n   | get value at addr n (default current)  | 1
  @S n   | perform S on ptr                       | 1
   + n   | inc val by n (default 1)               | 1
   - n   | dec val by n (default 1)               | 1
   * n   | mult val by n (default 1)              | 1
   / n   | div val by n (default 1)               | 1
   = n   | set val to n (default 0)               | 1
    .    | print val as ASCII character           | 2
    ,    | set val to read ASCII character        | 2
    {    | open new scope (follows keyword)       | 3
    }    | close current scope (follows })        | 3
 v1 < v2 | returns whether v1 is less than v2     | 4
 v1 > v2 | returns whether v1 is greather than v2 | 4
v1 == v2 | returns whether v1 is equal to v2      | 4
v1 <= v2 | returns v1 less or equal to v2         | 4
v1 >= v2 | returns v1 greater or equal to v2      | 4
v1 != v2 | returns whether v1 is not equal to v2  | 4
*where S is any symbol that acts on val
*where n is any non-negative number (0+) less than MAX_INT
*where v1,v2 are any valid number which may be preceded by @
 *if v1 is unspecified, current val is used
 *if v1 is @, compares ptr with v2

Keyword | Syntax                             | Step to implement
--------|------------------------------------|------------------
#define | #define name sub                   | 2
   if   | if(cond){}                         | 3
  else  | if(cond){}else{}                   | 3
  for   | for(start;cond;step){}             | 3
 while  | while(cond){} -or- do{}while(cond) | 3
   do   | do{}while(cond)                    | 3
   ?:   | cond?val1:val2                     | 3
*where name is a string literal to be replaced with sub in code body
*where 'cond' is a boolean condition which evaluates to false if zero, true otherwise

Comments: "// ..." for single line, "/* ... */" for multi-line
Integer Conversions:
*replace char literals ('H') with their ASCII value
*allow "0x" prefix to denote hexadecimal

Also to add:
*bitwise operators
*boolean operators
*functions
*variables
**data types
**structs
**classes